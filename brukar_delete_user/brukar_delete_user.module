<?php

require_once(drupal_get_path('module', 'brukar_common') . '/OAuth.php');
require_once(drupal_get_path('module', 'brukar_server') . '/brukar_server.class.php');

/**
 * Implements hook_views_api().
 */
function brukar_delete_user_views_api() {
    return array('api' => 3);
}

/**
 * Implements hook_menu().
 */
function brukar_delete_user_menu() {
  return [
    'server/api/user' => array(
      'title' => 'Delete User',
      'page callback' => 'brukar_delete_user_handle_user_request',
      'type' => MENU_CALLBACK,
      //'access arguments' => array('brukar admin'),
      'access argument' => TRUE,
    ),
  ];
}

/**
 * Handle requests to server/api/user
 * @param string $userkey Userkey
 */
function brukar_delete_user_handle_user_request($userkey = null) {
  $function = isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']) ? $_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'] : $_SERVER['REQUEST_METHOD'];

  switch($function) {
    case 'DELETE':
      brukar_delete_user_delete_user($userkey);
      break;

    default:
      brukar_delete_user_method_not_allowed(['DELETE']);
      break;
  }
}

/**
 * Sends method not allowed response
 * @param array $legal_methods Legal methods
 */
function brukar_delete_user_method_not_allowed($legal_methods) {
  header('Allow: ' . implode(', ', $legal_methods));
  http_response_code(405);
  die();
}

/**
 * Delete user with userkey and responds
 * @param $userkey
 */
function brukar_delete_user_delete_user($userkey) {
  $dom = new DOMDocument('1.0', 'utf-8');
  $root = $dom->createElement('response');
  $dom->appendChild($root);
  $status = $dom->createElement('status');
  $root->appendChild($status);

  if(!isset($userkey)) {
    // Userkey missing, return 400 bad request.
    $status->nodeValue = 'Missing userkey';
    _brukar_delete_user_send_response($dom->saveXML(), 400);
  }

  try {
    $user_db = db_select('users', 'a')
      ->condition('data', '%' . $userkey . '%', 'LIKE')
      ->fields('a')
      ->execute()
      ->fetch();

    if($user_db) {
      $user = entity_metadata_wrapper('user', $user_db->uid);
      $user->field_delete->set(1);
      $user->save();
    }

    $status->nodeValue = 'OK';
  }

  catch (Exception $e) {
    $status->nodeValue = 'ERROR';
    $exception_node = $dom->createElement('exception');
    $root->appendChild($exception_node);
    $exception_node->appendChild($dom->createCDATASection($e->__toString()));
  }

  finally {
    _brukar_delete_user_send_response($dom->saveXML());
  }
}

/**
 * Send response back to user
 * @param string $xml_payload XML payload
 * @param int $status_code Http status code
 */
function _brukar_delete_user_send_response($xml_payload = null, $status_code = 200) {
  http_response_code($status_code);
  header('Access-Control-Allow-Origin: *'); // Required for external API calls
  if(isset($xml_payload)) {
    $accept_list = _brukar_delete_user_proccess_http_accept($_SERVER['HTTP_ACCEPT']);
    $content_type = null;

    foreach ($accept_list as $media => $grade) {
      switch ($media) {
        case 'application/json':
          $content_type = 'application/json';
          break 2;

        case 'text/xml':
          $content_type = 'text/xml';
          break 2;
      }
    }

    switch ($content_type) {
      case 'text/xml':
        header('Content-Type: text/xml');
        header('Content-Language: en');
        print $xml_payload;
        break;

      case 'application/json':
      default:
        header('Content-Type: application/json');
        header('Content-Language: en');
        $sxml = simplexml_load_string($xml_payload, 'SimpleXMLElement', LIBXML_NOCDATA);
        print json_encode($sxml);
        break;
    }
  }
  die();
}

/**
 * Parse http accept header into a sorted list based on "q".
 * Missing "q" gets a factor of 1.
 * @param string $http_accept Accept header string
 * @return array Sorted array
 */
function _brukar_delete_user_proccess_http_accept($http_accept) {
  $langs = [];
  if (isset($http_accept)) {
    preg_match_all('/([a-z+*]{1,}(\/[a-z+*]{1,})?)\s*(;\s*q\s*=\s*(1|0\.[0-9]+))?/i', $http_accept, $lang_parse);
    if (count($lang_parse[1])) {
      // create a list like "en" => 0.8
      $langs = array_combine($lang_parse[1], $lang_parse[4]);

      // set default to 1 for any without q factor
      foreach ($langs as $lang => $val) {
        if ($val === '') {
          $langs[$lang] = 1;
        }
      }

      // sort list based on value
      arsort($langs, SORT_NUMERIC);
    }
  }

  return $langs;
}

/**
 * Implements hook_permission().
 */
function brukar_delete_user_permission() {
  $permission['brukar delete_user'] = [
    'title' => t('View list delete user'),
    'description' => t('Administer list of users for deleting'),
  ];

  return $permission;
}