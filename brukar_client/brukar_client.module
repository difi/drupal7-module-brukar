<?php

/**
 * Helper function for profiles.
 *
 *   function hook_install_tasks() {
 *     return array(
 *       'brukar_install_task' => array(
 *         'display_name' => st('Brukar'),
 *         'type' => 'form',
 *       ),
 *     );
 *   }
 */
function brukar_client_install_task($form) {
  require_once(drupal_get_path('module', 'brukar_client') . '/brukar_client.admin.php');
  return brukar_client_admin($form);
}

/**
 * Implements hook_menu().
 */
function brukar_client_menu() {
  $items['admin/config/people/brukar'] = array(
    'title' => 'Brukar',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brukar_client_admin'),
    'access arguments' => array('brukar admin'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'brukar_client.admin.php',
  );
  $items['admin/config/people/brukar/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Add menu items to URIs without menu items
  if(variable_get('brukar_forced', '0') != 0) {
    $rebuild = variable_get('menu_rebuild_needed', FALSE);
    if($rebuild) {
      /* Override menu_rebuild_needed to avoid stack overflow when calling menu_get_item */
      variable_set('menu_rebuild_needed', FALSE);
    }

    $masks = variable_get('menu_masks', TRUE);
    if (!$masks) {
      /* Override menu_masks to avoid stack overflow when calling menu_get_item */
      variable_set('menu_masks', TRUE);
    }

    $uris = preg_split("/\\r\\n|\\r|\\n/", variable_get('brukar_forced_greenlit_uri', ''));
    foreach($uris as $i => $uri) {
      $menu_item = menu_get_item($uri);
      if (!$menu_item) {
        $items[$uri] = [
          'title' => 'Brukar forced ignored',
          'access arguments' => [], // access argument gets set in menu_alter
        ];
      }
    }

    if($rebuild) {
      variable_set('menu_rebuild_needed', $rebuild);
    }
    if(!$masks) {
      variable_set('menu_masks', $masks);
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function brukar_client_menu_alter(&$items) {
  if (variable_get('brukar_dup', '0') == 1) {
    $items['user']['page arguments'] = array($items['user']['page callback']);
    $items['user']['page callback'] = 'brukar_client_user_page';
    $items['user']['access callback'] = 'brukar_client_user_page_access';

    unset($items['user/register']);
    unset($items['user/password']);
    unset($items['user/reset/%/%/%']);
  }

  // Add "brukar forced ignore" to menu items on greenlit URI
  if(variable_get('brukar_forced', '0') != 0) {
    $rebuild = variable_get('menu_rebuild_needed', FALSE);
    if($rebuild) {
      /* Override menu_rebuild_needed to avoid stack overflow when calling menu_get_item */
      variable_set('menu_rebuild_needed', FALSE);
    }

    $masks = variable_get('menu_masks', array());
    if (!$masks) {
      /* Override menu_masks to avoid stack overflow when calling menu_get_item */
      variable_set('menu_masks', TRUE);
    }

    $uris = preg_split("/\\r\\n|\\r|\\n/", variable_get('brukar_forced_greenlit_uri', ''));

    foreach($uris as $i => $uri) {
      $menu_item = menu_get_item($uri);
      if($menu_item) {
        $items[$menu_item['path']]['access arguments'][] = 'brukar forced ignore';
      }
      elseif(isset($items[$uri])) {
        $items[$uri]['access arguments'][] = 'brukar forced ignore';
      }
    }

    if($rebuild) {
      variable_set('menu_rebuild_needed', $rebuild);
    }
    if(!$masks) {
      variable_set('menu_masks', $masks);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds link to login form if brukar isn't hidden.
 */
function brukar_client_form_user_login_alter(&$form, &$form_state, $form_id) {
	if (variable_get('brukar_hidden', '0') == 0) {
	  $form['brukar'] = array(
	    '#markup' => l('Logg inn med brukar.', $_GET['q'], array('query' => $_GET + array('brukar' => NULL))),
	  );
	}
}

/**
 * Implements hook_init().
 */
function brukar_client_init() {

  // Allow drush to do the job.
  if (!function_exists('drush_main')) {
    // Handle callback
    if (isset($_GET['oauth_token']) && !isset($_GET['oauth_callback'])) {
      require_once(drupal_get_path('module', 'brukar_client') . '/brukar_client.oauth.php');
      brukar_client_oauth_callback();
    }
  
    if (user_is_anonymous()) {
      // Forced login
      if (variable_get('brukar_forced', '0') != 0 && !brukar_client_page_greenlit())
        brukar_client_user_trigger();
  
      // Magic login
      if (isset($_GET[variable_get('brukar_keyword', 'brukar')]))
        brukar_client_user_trigger();
    }
  }
}

/**
 * Check menu item for current URL if "brukar forced ignore" is
 * set as access argument.
 * @return bool
 */
function brukar_client_page_greenlit() {
  $menu_item = menu_get_item();
  if($menu_item && isset($menu_item['map'])) {
    $access_arguments = array_flip(menu_unserialize($menu_item['access_arguments'], $menu_item['map']));
    return isset($access_arguments['brukar forced ignore']);
  }
  else {
    return FALSE;
  }
}

/**
 * Reimplements user_page().
 */
function brukar_client_user_page($func = 'user_page') {
  return user_is_logged_in() ? call_user_func($func) : brukar_client_user_trigger();
}

/**
 * Trigger login
 */
function brukar_client_user_trigger() {
  // Do login on /user if allowed
  if ($_GET['q'] == 'user' && variable_get('brukar_hidden', 0) == 0)
    $_GET['q'] = isset($_GET['destination']) ? $_GET['destination'] : '<front>';

  // Remove keywork from URI if found
  if (isset($_GET[variable_get('brukar_keyword', 'brukar')]))
    unset($_GET[variable_get('brukar_keyword', 'brukar')]);

  // Fetch request token IF you are supposed to be allowed
  if (variable_get('brukar_url', '') != '') {
    require_once(drupal_get_path('module', 'brukar_client') . '/brukar_client.oauth.php');
    return brukar_client_oauth_request();
  }
}

/**
 * Controls access to /user.
 */
function brukar_client_user_page_access() {
  return (user_is_logged_in() || variable_get('brukar_hidden', 0) == 0);
}

/**
 * Implements hook_user_view_alter().
 */
function brukar_client_user_view_alter(&$build) {
  global $user;
  if ($build['#account']->uid == $user->uid && !isset($user->data['brukar']))
    $build['brukar'] = drupal_get_form('brukar_client_form_login');
}

/**
 * Form containing one button to trigger forced login.
 */
function brukar_client_form_login($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Logg inn med brukar',
  );

  return $form;
}

/**
 * Trigger forced login because the button in the form are used.
 */
function brukar_client_form_login_submit($form, &$form_state) {
  brukar_client_user_trigger();
}

/**
 * Implements hook_user_load().
 */
function brukar_client_user_load($users) {
  foreach ($users as $uid => $user) {
    if (isset($user->data['brukar'])) {
      $user->cellphone = isset($user->data['brukar']['cellphone']) ? $user->data['brukar']['cellphone'] : (isset($user->data['brukar']['phone']) ? $user->data['brukar']['phone'] : "");
      $user->organization = isset($user->data['brukar']['organization']) ? $user->data['brukar']['organization'] : "";
      $user->homepage = isset($user->data['brukar']['homepage']) ? $user->data['brukar']['homepage'] : "";
    }

    $users[$uid] = $user;
  }
}

/**
 * Implements hook_username_alter().
 */
function brukar_client_username_alter(&$name, $account) {
  if (isset($account->data) && is_array($account->data) && isset($account->data['brukar']))
    $name = $account->data['brukar']['name'];
}

/**
 * Implements hook_user_logout().
 */
function brukar_client_user_logout($account) {
  global $base_url;
  $params = drupal_get_query_parameters();
  
  if(!empty($params)){
    /* If logout parameter is not set, we redirect user to brukar.difi.no to perform logout from brukar.difi.no first.
       brukar.difi.no will redirect user back to site with url paremter logout=true */
    if (isset($params['logout']) && $params['logout'] != "true" //making exception for masquerade...
      && (strpos($_REQUEST['q'], 'masquerade/switch/') != FALSE
        || strpos($_REQUEST['q'], 'masquerade/unswitch/') != FALSE)) {
      $url = variable_get('brukar_url', '') . "logout?returnTo=" . $base_url . "/user/logout";
      drupal_goto($url);
    }
  }
}